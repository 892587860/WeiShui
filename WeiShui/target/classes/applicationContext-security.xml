<?xml version="1.0" encoding="UTF-8"?>  
<b:beans xmlns="http://www.springframework.org/schema/security" 
    xmlns:b="http://www.springframework.org/schema/beans" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
                        http://www.springframework.org/schema/security
	http://www.springframework.org/schema/security/spring-security-3.2.xsd">  
 
  <!--登录页面不过滤 -->  
    <http pattern="/login.jsp" security="none" />  
    <http pattern="/auth/*.do" security="none" />  
   <!--  <http pattern="/admin.jsp" security="none" /> -->  
    <http access-denied-page="/accessDenied.jsp">  
        <form-login login-page="/login.jsp" />  
        <!--访问/admin.jsp资源的用户必须具有ROLE_ADMIN的权限 -->  
      <intercept-url pattern="/admin.jsp" access="ROLE_ADMIN" /> 
        <!--访问/**资源的用户必须具有ROLE_USER的权限 --> 
       <!--  <intercept-url pattern="/**" access="ROLE_USER" />  --> 
        <session-management>  
            <concurrency-control max-sessions="1" 
                error-if-maximum-exceeded="false" />  
        </session-management>  
        <!--增加一个filter，这点与 Acegi是不一样的，不能修改默认的filter了， 这个filter位于FILTER_SECURITY_INTERCEPTOR之前 -->  
        <custom-filter ref="myFilter" before="FILTER_SECURITY_INTERCEPTOR" />  
    </http>  
    <!--一个自定义的filter，必须包含 authenticationManager,accessDecisionManager,securityMetadataSource三个属性，   
        我们的所有控制将在这三个类中实现，解释详见具体配置 -->  
    <b:bean id="myFilter" 
        class="com.weishui.auth.MyFilterSecurityInterceptor">  
        <b:property name="authenticationManager" ref="authenticationManager" />  
        <b:property name="accessDecisionManager" ref="myAccessDecisionManagerBean" />  
        <b:property name="securityMetadataSource" ref="securityMetadataSource" />  
    </b:bean>  
    <!--验证配置，认证管理器，实现用户认证的入口，主要实现UserDetailsService接口即可 -->  
    <authentication-manager alias="authenticationManager">  
        <authentication-provider user-service-ref="myUserDetailService">  
            <!--如果用户的密码采用加密的话 <password-encoder hash="md5" /> -->  
        </authentication-provider>  
    </authentication-manager>  
    <!--在这个类中，你就可以从数据库中读入用户的密码，角色信息，是否锁定，账号是否过期等 -->  
    <b:bean id="myUserDetailService" class="com.weishui.auth.MyUserDetailService" >  
    </b:bean>
    <!--访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源 -->  
    <b:bean id="myAccessDecisionManagerBean" class="com.weishui.auth.MyAccessDecisionManager">  
    </b:bean>  
    <!--资源源数据定义，将所有的资源和权限对应关系建立起来，即定义某一资源可以被哪些角色访问 -->  
    <b:bean id="securityMetadataSource"  class="com.weishui.auth.MyInvocationSecurityMetadataSource" />   
 
 </b:beans>